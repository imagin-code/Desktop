<i:MainWindow x:Class="Imagin.Apps.Desktop.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:i="http://imagin.tech/imagin/wpf"
    xmlns:w="clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    l:LocalizeDictionary.DesignCulture="en" l:ResxLocalizationProvider.DefaultAssembly="{i:DefaultAssemblyName}" l:ResxLocalizationProvider.DefaultDictionary="Main"
    xmlns:v="clr-namespace:Vlc.DotNet.Wpf;assembly=Vlc.DotNet.Wpf"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Apps.Desktop"
    xmlns:ComponentModel="clr-namespace:System.ComponentModel;assembly=System"
    xmlns:Core="clr-namespace:Imagin.Core;assembly=Imagin.Core"
    xmlns:Data="clr-namespace:Imagin.Core.Data;assembly=Imagin.Core"
    i:XWindow.HeaderPlacement="{i:VisibilityBinding MenuPlacement, GlobalSource=Options}">
    <i:MainWindow.InputBindings>
        <KeyBinding Key="Delete" Command="{Binding DeleteCommand}"/>
        <KeyBinding Modifiers="Ctrl" Key="C" Command="{Binding CopyCommand}"/>
        <KeyBinding Modifiers="Ctrl" Key="V" Command="{Binding PasteCommand}"/>
        <KeyBinding Modifiers="Ctrl" Key="X" Command="{Binding CutCommand}"/>
        <KeyBinding Modifiers="Ctrl" Key="Y" Command="{Binding RedoCommand}"/>
        <KeyBinding Modifiers="Ctrl" Key="Z" Command="{Binding UndoCommand}"/>
    </i:MainWindow.InputBindings>
    <i:MainWindow.Resources>
        <Style x:Key="{x:Static local:MainViewModel.TileStyleKey}" TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type Control}}">
            <Setter Property="Background" Value="{i:ThemeKey ListBoxItemBackground}" />
            <Setter Property="BorderBrush" Value="{i:ThemeKey ListBoxItemBorder}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Canvas.Left" Value="{Binding Position.X, Mode=TwoWay}"/>
            <Setter Property="Canvas.Top" Value="{Binding Position.Y, Mode=TwoWay}"/>
            <Setter Property="Foreground" Value="{i:ThemeKey Text}" />
            <Setter Property="Height" Value="{Binding Size.Height, Mode=TwoWay}"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
            <Setter Property="i:XElement.CanMove" Value="False"/>
            <Setter Property="i:XElement.CanMoveOutside" Value="{i:Options CanDragTilesOutside}"/>
            <Setter Property="i:XElement.CanResize" Value="False"/>
            <Setter Property="i:XElement.CanRotate" Value="False"/>
            <Setter Property="i:XElement.FadeIn" Value="True"/>
            <Setter Property="i:XElement.FadeOut" Value="True"/>
            <Setter Property="i:XElement.MoveSnap" Value="{i:Options TileMoveSnap}"/>
            <Setter Property="i:XElement.MoveThumbStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                        <Setter Property="ToolTip" Value="{i:Loc Move}"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Ellipse Cursor="{TemplateBinding Cursor}" Fill="{i:ThemeKey Key=Accent}" Height="10" Width="10"/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="i:XElement.ResizeSnap" Value="{i:Options TileResizeSnap}"/>
            <Setter Property="i:XElement.ResizeThumbStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Border
                                        Background="{i:ThemeKey Key=Accent}"
                                        Cursor="{TemplateBinding Cursor}">
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="i:XElement.RotateLineColor" Value="{i:ThemeKey Key=Accent}"/>
            <Setter Property="i:XElement.RotateSnap" Value="{i:Options TileRotateSnap}"/>
            <Setter Property="i:XElement.RotateThumbStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <i:FillElement Fill="Transparent">
                                        <i:ImageElement Cursor="{TemplateBinding Cursor}" Foreground="{i:ThemeKey Key=Accent}" Source="{i:SmallImage Image=Reset}" ToolTip="{i:Loc Rotate}"/>
                                    </i:FillElement>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="Opacity" Value="0" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Padding" Value="0"/>
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <RotateTransform Angle="{Binding Rotation, Mode=TwoWay}"/>
                </Setter.Value>
            </Setter>
            <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Template" Value="{StaticResource {x:Static i:XListBoxItem.TemplateKey}}"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch" />
            <Setter Property="Width" Value="{Binding Size.Width, Mode=TwoWay}"/>
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver}" Value="True"/>
                        <Condition Binding="{Binding IsSelected}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="i:XElement.MoveThumbStyle">
                        <Setter.Value>
                            <Style TargetType="{x:Type Thumb}">
                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                <Setter Property="ToolTip" Value="{i:Loc Move}"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                            <Ellipse Cursor="{TemplateBinding Cursor}" Fill="#77FFFFFF" Height="10" Width="10"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="i:XElement.ResizeThumbStyle">
                        <Setter.Value>
                            <Style TargetType="{x:Type Thumb}">
                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                            <Border
                                                Background="#77FFFFFF"
                                                Cursor="{TemplateBinding Cursor}">
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="i:XElement.RotateThumbStyle">
                        <Setter.Value>
                            <Style TargetType="{x:Type Thumb}">
                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                            <i:FillElement Fill="Transparent">
                                                <i:ImageElement Cursor="{TemplateBinding Cursor}" Foreground="#77FFFFFF" Source="{i:SmallImage Image=Reset}" ToolTip="{i:Loc Rotate}"/>
                                            </i:FillElement>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="i:XElement.RotateLineColor" Value="#77FFFFFF"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver}" Value="True"/>
                        <Condition Binding="{Binding IsLocked}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="i:XElement.CanMove" Value="True"/>
                    <Setter Property="i:XElement.CanResize" Value="True"/>
                    <Setter Property="i:XElement.CanRotate" Value="True"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSelected}" Value="True"/>
                        <Condition Binding="{Binding IsLocked}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="i:XElement.CanMove" Value="True"/>
                    <Setter Property="i:XElement.CanResize" Value="True"/>
                    <Setter Property="i:XElement.CanRotate" Value="True"/>
                </MultiDataTrigger>

                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True"/>
                        <Condition Property="Selector.IsSelectionActive" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="#77FFFFFF"/>
                    <Setter Property="BorderBrush" Value="{i:ThemeKey ListBoxItemSelectedActiveBorder}"/>
                    <Setter Property="Foreground" Value="{i:ThemeKey ListBoxItemSelectedActiveForeground}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True"/>
                        <Condition Property="Selector.IsSelectionActive" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="#77000000"/>
                    <Setter Property="BorderBrush" Value="{i:ThemeKey ListBoxItemSelectedBorder}"/>
                    <Setter Property="Foreground" Value="{i:ThemeKey ListBoxItemSelectedForeground}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="False"/>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="#33FFFFFF"/>
                    <Setter Property="BorderBrush" Value="{i:ThemeKey ListBoxItemMouseOverBorder}"/>
                    <Setter Property="Foreground" Value="{i:ThemeKey ListBoxItemMouseOverForeground}"/>
                </MultiTrigger>
                
                <Trigger Property="i:XControl.IsDraggingOver" Value="True">
                    <Setter Property="BorderBrush" Value="{i:ThemeKey DropTargetBorder}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- /// -->

        <!--
        <TextBox
            i:XTextBox.CanLabel="True"
            i:XTextBox.EditButtonVisibility="Collapsed"
            i:XTextBox.EditMouseEvent="MouseDown"
            i:XTextBox.IsEditable="False"
            i:XTextBox.Label="{i:Self Text}"
            i:XTextBoxBase.Placeholder="{l:Loc Name}"
            Text="{Binding Name, Mode=TwoWay}"
            ToolTip="{i:Self Text}"/>
        -->

        <i:TypeTemplateSelector x:Key="{x:Static local:MainViewModel.TileContentTemplateSelectorKey}" Strict="False">
            <DataTemplate DataType="{x:Type local:CalendarTile}">
                <Viewbox>
                    <Calendar SelectedDate="{i:TwoWay Date}"/>
                </Viewbox>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ClockTile}">
                <Viewbox Stretch="Uniform" StretchDirection="Both">
                    <ContentPresenter x:Name="Content" Content="{Binding}" ContentTemplate="{i:EmptyTemplate}" Margin="5"/>
                </Viewbox>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Type}" Value="Analog">
                        <Setter TargetName="Content" Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <i:Clock/>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Type}" Value="Digital">
                        <Setter TargetName="Content" Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <TextBlock FontFamily="{Binding FontFamily}"/>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ColorTile}">
                <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,*" i:XPanel.Spacing="0,0,0,5">
                    <TextBox Text="{i:Bind Document.NewColor, Convert={x:Type i:ColorToStringConverter}, Mode=TwoWay}">
                        <i:XTextBoxBase.Left>
                            <i:DataTemplateCollection>
                                <DataTemplate>
                                    <TextBlock Margin="0,0,5,0" Opacity="0.5" Text="#"/>
                                </DataTemplate>
                            </i:DataTemplateCollection>
                        </i:XTextBoxBase.Left>
                    </TextBox>
                    <i:ColorSelectorView Document="{Binding Document}"/>
                </Grid>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ConsoleTile}">
                <i:ConsoleBox i:XExplorer.Path="{Binding Path, Mode=TwoWay}" 
                    BorderThickness="0"
                    i:XElement.Reference="{Binding}"
                    i:XElement.ReferenceKey="{x:Static local:ConsoleTile.ConsoleReferenceKey}"
                    IsInputEnabled="True" 
                    ShowDiagnostics="True"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:CountDownTile}">
                <Grid i:XElement.MouseDownCommand="{i:Bind ChangeImageCommand}" Cursor="Hand" ToolTip="Change image...">
                    <Grid.Background>
                        <ImageBrush ImageSource="{i:Bind Image}" Stretch="UniformToFill"/>
                    </Grid.Background>
                    <Grid i:XGrid.Rows="Auto,Auto,Auto" i:XGrid.AutoRows="True" VerticalAlignment="Center">
                        <TextBox Text="{Binding Date, Mode=TwoWay, StringFormat='M/d/yyyy h:mm tt', UpdateSourceTrigger=LostFocus}"
                            FontSize="36"
                            HorizontalAlignment="Center"
                            i:XTextBox.CanLabel="True"
                            i:XTextBox.EditMouseEvent="MouseDown"
                            i:XTextBox.IsEditable="{Binding IsEditable, Mode=TwoWay}"
                            i:XTextBox.Label="{i:Bind Date, Convert={x:Type i:ShortTimeConverter}, ConverterParameter=1}"
                            Margin="5"
                            ToolTip="{i:Self Label}"
                            VerticalAlignment="Center"/>
                        <TextBox Text="{i:Bind Title, Trigger=LostFocus, Way=2}"
                            FontSize="20"
                            HorizontalAlignment="Center"
                            i:XTextBox.CanLabel="True"
                            i:XTextBox.EditMouseEvent="MouseDown"
                            i:XTextBox.IsEditable="{Binding IsEditable, Mode=TwoWay}"
                            i:XTextBox.Label="{i:Bind Title}"
                            Margin="5,0"
                            ToolTip="{i:Self Label}"/>
                        <TextBlock Text="{i:Bind Date, StringFormat='ddd, MMM d, yyyy'}" 
                            FontSize="12"
                            HorizontalAlignment="Center" 
                            Margin="5,0"
                            TextTrimming="CharacterEllipsis"/>
                    </Grid>
                </Grid>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:FolderTile}">
                <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,*" i:XPanel.Spacing="0,0,0,5">
                    <Border BorderBrush="#11000000" BorderThickness="0,0,0,1" Padding="5">
                        <i:AddressBox i:XExplorer.Path="{i:TwoWay Path}"/>
                    </Border>
                    <i:Browser 
                        Background="Transparent"
                        BorderThickness="0"
                        FileOpenedCommand="{i:Bind OpenFileCommand, GlobalSource=MainViewModel}"
                        FolderOpenedCommand="{i:Bind OpenFolderCommand, GlobalSource=MainViewModel}"
                        GroupDirection="{Binding BrowserOptions.GroupDirection}"
                        GroupName="{Binding BrowserOptions.GroupName}"
                        IsReadOnly="{Binding IsReadOnly}"
                        i:XElement.Reference="{Binding}"
                        i:XElement.ReferenceKey="{x:Static local:FolderTile.BrowserReferenceKey}"
                        i:XExplorer.Path="{Binding Path, Mode=TwoWay}"
                        SortDirection="{i:Bind BrowserOptions.SortDirection, ConvertFrom={x:Type Data:SortDirection}, ConvertTo={x:Type ComponentModel:ListSortDirection}}"
                        SortName="{Binding BrowserOptions.SortName}"
                        View="{Binding BrowserOptions.View}"
                        ViewCheckBoxes="{Binding BrowserOptions.ViewCheckBoxes}"
                        ViewFileExtensions="{Binding BrowserOptions.ViewFileExtensions}"
                        ViewFiles="{Binding BrowserOptions.ViewFiles}"
                        ViewSize="{Binding BrowserOptions.Size, Mode=TwoWay}">
                    </i:Browser>
                </Grid>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ImageTile}">
                <i:SlideshowControl
                    BackgroundOpacity="1"
                    Interval="{i:Bind Interval, Convert={x:Type i:DoubleToTimeSpanConverter}}"
                    PauseOnMouseOver="True"
                    Path="{Binding Path}"
                    Stretch="{Binding Stretch}"
                    Transition="{Binding Transition}">
                    <i:SlideshowControl.Opacity>
                        <i:MultiBind Convert="{x:Type i:OpacityMultiConverter}">
                            <i:Options Path="TileOpacity"/>
                            <i:Bind Path="Opacity"/>
                        </i:MultiBind>
                    </i:SlideshowControl.Opacity>
                </i:SlideshowControl>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:NoteTile}">
                <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,*" i:XPanel.Spacing="0,0,0,5">
                    <i:BottomBorder BorderBrush="#11000000">
                        <TextBox
                            BorderThickness="0"
                            i:XTextBox.CanLabel="True"
                            i:XTextBox.EditButtonVisibility="Collapsed"
                            i:XTextBox.EditMouseEvent="MouseDown"
                            i:XTextBox.IsEditable="False"
                            i:XTextBox.Label="{i:Self Text}"
                            i:XTextBoxBase.Placeholder="{l:Loc Title}"
                            Text="{Binding Title, Mode=TwoWay}"
                            ToolTip="{i:Self Text, Mode=OneWay}"/>
                    </i:BottomBorder>
                    <TextBox
                        AcceptsReturn="True"
                        Background="Transparent"
                        BorderThickness="0"
                        FontFamily="{Binding FontFamily}"
                        FontSize="{Binding FontSize}"
                        HorizontalAlignment="Stretch"
                        i:XElement.Wheel="True"
                        i:XElement.WheelMaximum="72"
                        i:XElement.WheelMinimum="8"
                        i:XElement.WheelValue="{Binding FontSize, Mode=TwoWay}"
                        i:XTextBox.ClearButtonVisibility="Collapsed"
                        i:XTextBoxBase.TextTrimming="None"
                        Padding="0"
                        Text="{Binding Text, Mode=TwoWay}"
                        TextAlignment="{Binding FontAlignment}"
                        TextWrapping="Wrap"
                        VerticalAlignment="Stretch"
                        VerticalContentAlignment="Top"/>
                </Grid>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:SearchTile}">
                <TextBox
                    BorderThickness="0"
                    i:XTextBox.EnterCommand="{Binding SearchCommand}"
                    i:XTextBox.EnterButtonVisibility="Visible"
                    i:XTextBoxBase.Placeholder="Search..."
                    i:XTextBoxBase.TextTrimming="CharacterEllipsis"
                    Text="{Binding Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <TextBox.Resources>
                        <i:Reference x:Key="SearchTile" Data="{Binding}"/>
                    </TextBox.Resources>
                    <i:XTextBoxBase.Right>
                        <i:DataTemplateCollection>
                            <DataTemplate>
                                <ComboBox
                                    ItemsSource="{i:Options SearchEngines}"
                                    SelectedIndex="{i:Bind Data.SearchEngine, Mode=TwoWay, Source={StaticResource SearchTile}, Trigger=PropertyChanged}">
                                    <ComboBox.ItemTemplate>
                                        <DataTemplate DataType="local:SearchEngine">
                                            <TextBlock HorizontalAlignment="Left" Text="{Binding Name}"/>
                                        </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                    <i:XComboBox.SelectedItemTemplate>
                                        <DataTemplate DataType="local:SearchEngine">
                                            <TextBlock HorizontalAlignment="Left" Text="{Binding Name}"/>
                                        </DataTemplate>
                                    </i:XComboBox.SelectedItemTemplate>
                                </ComboBox>
                            </DataTemplate>
                        </i:DataTemplateCollection>
                    </i:XTextBoxBase.Right>
                </TextBox>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ShortcutTile}">
                <Grid i:XGrid.Rows="*,Auto" i:XGrid.AutoRows="True">
                    <Viewbox Cursor="Hand">
                        <i:Thumbnail Path="{Binding Path}"
                            i:XElement.MouseDownCommand="{i:Bind OpenCommand, GlobalSource=MainViewModel}"
                            i:XElement.MouseDownCommandParameter="{i:Bind Path}"/>
                    </Viewbox>
                    <ContentPresenter x:Name="Content" Content="{i:Bind OverrideName}" HorizontalAlignment="Center" Margin="0,5,0,0" Visibility="{i:VisibilityBinding ShowName}"/>
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsSelected}" Value="True">
                        <Setter TargetName="Content" Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <TextBlock Text="{i:Bind}" TextTrimming="None" TextWrapping="Wrap"/>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsSelected}" Value="False">
                        <Setter TargetName="Content" Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <TextBlock Text="{i:Bind}" TextTrimming="CharacterEllipsis"/>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding OverrideName}" Value="">
                        <Setter TargetName="Content" Property="Content" Value="{i:Bind Path, Convert=i:FileNameConverter}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding OverrideName}" Value="{x:Null}">
                        <Setter TargetName="Content" Property="Content" Value="{i:Bind Path, Convert=i:FileNameConverter}"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:VideoTile}">
                <v:VlcControl/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:WebTile}">
                <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,*" i:XPanel.Spacing="0,0,0,5">
                    <Border BorderBrush="#11000000" BorderThickness="0,0,0,1" Padding="5">
                        <TextBox BorderThickness="0" Padding="0" Text="{i:Bind Address, Trigger=LostFocus, Way=2}"/>
                    </Border>
                    <w:WebView2 Source="{i:Bind Address, Trigger=LostFocus, Way=2}"/>
                </Grid>
            </DataTemplate>
        </i:TypeTemplateSelector>

        <!-- /// -->

        <DataTemplate x:Key="{x:Static local:MainViewModel.TileTemplateKey}">
            <Border>
                <Border.Resources>
                    <i:Reference x:Key="Screen" Data="{i:Ancestor DataContext, ListBox}"/>
                    <i:Reference x:Key="Tile" Data="{i:Bind}"/>
                </Border.Resources>
                <Border>
                    <!--
                    <Border.Effect>
                        <i:BlendEffect ActualBlendMode="{Binding Data.BlendMode, Source={StaticResource Tile}}">
                            <i:BlendEffect.BInput>
                                <VisualBrush>
                                    <VisualBrush.Visual>
                                        <Image Source="{Binding Data.Slideshow.SelectedImageSource, Source={StaticResource Screen}}">
                                            <Image.Opacity>
                                                <i:MultiBind Convert="{x:Type i:OpacityMultiConverter}">
                                                    <i:Options Path="TileOpacity"/>
                                                    <i:Bind Path="Data.Opacity" Source="{StaticResource Tile}"/>
                                                </i:MultiBind>
                                            </Image.Opacity>
                                        </Image>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </i:BlendEffect.BInput>
                        </i:BlendEffect>
                    </Border.Effect>
                    -->
                    <Grid>
                        <Grid.Effect>
                            <DropShadowEffect 
                                BlurRadius="{i:Options TileShadowRadius}" 
                                Color="{i:Options TileShadowColor, Convert=i:ByteVector4ToColorConverter}" 
                                Direction="{i:Options TileShadowDirection}" 
                                Opacity="{i:Options TileShadowOpacity}" 
                                RenderingBias="Performance"
                                ShadowDepth="{i:Options TileShadowDepth}"/>
                        </Grid.Effect>
                        <i:ClipBorder x:Name="ClipBorder" i:EffectExtensions.Effects="{Binding Effects}">
                            <i:ClipBorder.Clip>
                                <i:MultiBind Convert="i:ShapeToGeometryMultiConverter">
                                    <Binding Path="ActualShape"/>
                                    <Binding ElementName="ClipBorder" Path="ActualHeight"/>
                                    <Binding ElementName="ClipBorder" Path="ActualWidth"/>
                                </i:MultiBind>
                            </i:ClipBorder.Clip>
                            <Grid x:Name="Grid" Background="Transparent" DataContext="{Binding}">
                                <i:FillElement x:Name="FillElement">
                                    <i:FillElement.Opacity>
                                        <i:MultiBind Convert="{x:Type i:OpacityMultiConverter}">
                                            <i:Options Path="TileOpacity"/>
                                            <i:Bind Path="Opacity"/>
                                        </i:MultiBind>
                                    </i:FillElement.Opacity>
                                </i:FillElement>
                                <ContentControl x:Name="TileContent" Content="{Binding}" 
                                    ContentTemplateSelector="{StaticResource {x:Static local:MainViewModel.TileContentTemplateSelectorKey}}"/>
                            </Grid>
                        </i:ClipBorder>
                        <Path x:Name="ShapeBorder" IsHitTestVisible="False" Stroke="#AA000000" StrokeThickness="1" Visibility="Collapsed">
                            <Path.Data>
                                <i:MultiBind Convert="{x:Type i:ShapeToGeometryMultiConverter}">
                                    <Binding Path="ActualShape"/>
                                    <Binding ElementName="ClipBorder" Path="ActualHeight"/>
                                    <Binding ElementName="ClipBorder" Path="ActualWidth"/>
                                </i:MultiBind>
                            </Path.Data>
                        </Path>
                    </Grid>
                </Border>
            </Border>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsMouseOver}" Value="True">
                    <Setter TargetName="ShapeBorder" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                
                <DataTrigger Binding="{i:Bind Background, Convert=i:IsNullConverter}" Value="False">
                    <Setter TargetName="FillElement" 
                        Property="Fill" Value="{i:Bind Background, Convert=i:StringToSolidColorBrushConverter}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:Bind Foreground, Convert=i:IsNullConverter}" Value="False">
                    <Setter TargetName="TileContent" 
                        Property="Foreground" Value="{i:Bind Foreground, Convert=i:StringToSolidColorBrushConverter}"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{i:Bind Background}" Value="{x:Null}"/>
                        <Condition Binding="{i:Options TileOverrideTheme}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="FillElement" 
                        Property="Fill" Value="{i:Options TileBackground, Convert={x:Type i:ByteVector4ToSolidColorBrushConverter}}"/>
                    <Setter TargetName="TileContent" 
                        Property="Foreground" Value="{i:Options TileForeground, Convert={x:Type i:ByteVector4ToSolidColorBrushConverter}}"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{i:Bind Background}" Value="{x:Null}"/>
                        <Condition Binding="{i:Options TileOverrideTheme}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="FillElement" 
                        Property="Fill" Value="{i:ThemeKey WindowBackground}"/>
                </MultiDataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <!-- /// -->

        <DataTemplate x:Key="{x:Static local:MainViewModel.ScreenTemplateKey}">
            <HeaderedContentControl
                i:XHeaderedContentControl.HeaderPlacement="{i:Options TileMinimizedPlacement}"
                i:XHeaderedContentControl.HeaderVisibility="{i:Options TileMinimizedShow, Convert=i:BooleanToVisibilityConverter}">
                <!-- Minimized -->
                <HeaderedContentControl.Resources>
                    <i:Reference x:Key="Screen" Data="{i:Bind}"/>
                </HeaderedContentControl.Resources>
                <HeaderedContentControl.Header>
                    <ToolBar ItemsSource="{Binding Minimized}" Margin="5">
                        <ToolBar.ItemTemplate>
                            <DataTemplate>
                                <i:AllBorder Background="{i:ThemeKey Key=WindowBackground}" BorderBrush="{i:ThemeKey Key=WindowBorder}" Margin="0,0,5,0" Padding="5">
                                    <StackPanel Orientation="Horizontal" i:XPanel.Spacing="0,0,5,0">
                                        <i:ImageElement Source="{i:ImageAttributeBinding Type=Image}"/>
                                        <TextBlock Text="{i:NameAttributeBinding}"/>
                                        <i:ImageButton Command="{Binding RestoreCommand}" Source="{i:SmallImage Image=Restore}"/>
                                        <i:ImageButton Command="{Binding CloseCommand}" Source="{i:SmallImage Image=X}"/>
                                    </StackPanel>
                                </i:AllBorder>
                            </DataTemplate>
                        </ToolBar.ItemTemplate>
                    </ToolBar>
                </HeaderedContentControl.Header>
                <!-- Not minimized -->
                <ListBox x:Name="ListBox" ItemsSource="{Binding}"
                    BorderThickness="0"
                    i:XItemsControl.CanDragSelect="True"
                    i:XItemsControl.CanDragSelectGlobally="True"
                    i:XItemsControl.SelectionGlobalPredicate="{i:Bind IsDesktopActive, GlobalSource=MainViewModel}"
                    ItemContainerStyle="{StaticResource {x:Static local:MainViewModel.TileStyleKey}}"
                    ItemTemplate="{StaticResource {x:Static local:MainViewModel.TileTemplateKey}}"
                    Padding="0"
                    SelectionMode="Extended">
                    <ListBox.Resources>
                        <Style x:Key="{x:Type i:SelectionBorder}" TargetType="{x:Type i:SelectionBorder}" BasedOn="{StaticResource {x:Type i:SelectionBorder}}">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0"/>
                        </Style>
                    </ListBox.Resources>
                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas/>
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>
                </ListBox>
            </HeaderedContentControl>
        </DataTemplate>

        <!-- /// -->

        <DataTemplate x:Key="CancelButtonTemplate">
            <Button
                Command="{Binding CancelCommand}"
                HorizontalAlignment="Center"
                IsCancel="True"
                Margin="0,0,0,10"
                VerticalAlignment="Bottom">
                <StackPanel Orientation="Horizontal">
                    <i:ImageElement
                        Margin="0,0,5,0"
                        Source="{i:SmallImage Image=Pencil}"
                        SourceSize="16,16"/>
                    <TextBlock Text="{i:Loc Cancel}"/>
                </StackPanel>
            </Button>
        </DataTemplate>
    </i:MainWindow.Resources>
    <i:MainWindow.TaskbarItemInfo>
        <TaskbarItemInfo Description="{Binding TaskbarItemDescription}">
            <TaskbarItemInfo.ThumbButtonInfos>
                <ThumbButtonInfo 
                    Command="{Binding LeftScreenCommand}"
                    Description="Previous screen"
                    ImageSource="{i:SmallImage Image=ArrowLeft}"/>
                <ThumbButtonInfo 
                    Command="{Binding AddScreenCommand}"
                    Description="Add screen"
                    ImageSource="{i:SmallImage Image=Plus}"/>
                <ThumbButtonInfo 
                    Command="{Binding RightScreenCommand}"
                    Description="Next screen"
                    ImageSource="{i:SmallImage Image=ArrowRight}"/>
            </TaskbarItemInfo.ThumbButtonInfos>
        </TaskbarItemInfo>
    </i:MainWindow.TaskbarItemInfo>
    <Grid>
        <i:TransitionControl
            Background="{x:Null}"
            Content="{i:Bind GlobalSource=MainViewModel, Path=Screen, Mode=TwoWay}"
            ContentTemplate="{StaticResource {x:Static local:MainViewModel.ScreenTemplateKey}}"
            Transition="{i:Options ScreenTransition}"/>
        <i:FillElement Fill="#CC000000"
            i:XElement.CanSelect="True"
            i:XElement.SelectedCommand="{i:Bind SelectCommand, GlobalSource=MainViewModel}"
            i:XElement.FadeTrigger="True"
            i:XElement.FadeTriggerSource="{i:Bind GlobalSource=MainViewModel, Path=Drawing}"
            Opacity="0">
        </i:FillElement>
        <ContentPresenter Content="{i:Bind GlobalSource=MainViewModel}" ContentTemplate="{StaticResource CancelButtonTemplate}"
            i:XElement.FadeTrigger="True"
            i:XElement.FadeTriggerSource="{i:Bind GlobalSource=MainViewModel, Path=Drawing}"
            Opacity="0"/>
        <ListBox ItemsSource="{i:Bind Screens, GlobalSource=MainViewModel}"
            BorderThickness="0"
            Margin="10"
            Padding="0"
            SelectedItem="{i:Bind Screen, GlobalSource=MainViewModel, Way=2}"
            SelectionMode="Single"
            Visibility="{i:VisibilityBinding IsScreenNavigationVisible, GlobalSource=Options}">
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Cursor" Value="Hand" />
                    <Setter Property="Foreground" Value="#22FFFFFF" />
                    <Setter Property="Height" Value="{i:Options ScreenNavigationSize}" />
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="i:XElement.FadeIn" Value="True" />
                    <Setter Property="Margin" Value="0,0,10,0" />
                    <Setter Property="Opacity" Value="0" />
                    <Setter Property="OverridesDefaultStyle" Value="True" />
                    <Setter Property="Padding" Value="0" />
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Viewbox>
                                    <i:ClipBorder Background="{TemplateBinding Foreground}" Height="1" Width="1">
                                        <i:ClipBorder.Clip>
                                            <i:MultiBind Convert="{x:Type i:ShapeClipMultiConverter}">
                                                <i:Options Path="Shapes"/>
                                                <i:Options Path="ScreenNavigationShape"/>
                                            </i:MultiBind>
                                        </i:ClipBorder.Clip>
                                    </i:ClipBorder>
                                </Viewbox>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ToolTip" Value="{i:Loc Screen}" />
                    <Setter Property="VerticalContentAlignment" Value="Stretch" />
                    <Setter Property="Width" Value="{i:Options ScreenNavigationSize}" />
                    <Style.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground" Value="White"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground" Value="White"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground" Value="#44FFFFFF"/>
                        </MultiTrigger>
                    </Style.Triggers>
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.Style>
                <Style TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{i:Options ScreenNavigationAlignment}" Value="Down">
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="VerticalAlignment" Value="Bottom"/>

                            <Setter Property="ItemsPanel">
                                <Setter.Value>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{i:Options ScreenNavigationAlignment}" Value="Left">
                            <Setter Property="HorizontalAlignment" Value="Left"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>

                            <Setter Property="ItemsPanel">
                                <Setter.Value>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Vertical"/>
                                    </ItemsPanelTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{i:Options ScreenNavigationAlignment}" Value="Right">
                            <Setter Property="HorizontalAlignment" Value="Right"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>

                            <Setter Property="ItemsPanel">
                                <Setter.Value>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Vertical"/>
                                    </ItemsPanelTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{i:Options ScreenNavigationAlignment}" Value="Up">
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="VerticalAlignment" Value="Top"/>

                            <Setter Property="ItemsPanel">
                                <Setter.Value>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ListBox.Style>
        </ListBox>
    </Grid>
</i:MainWindow>