<i:MainWindow x:Class="Imagin.Apps.Desktop.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Apps.Desktop"
    xmlns:Hardcodet="http://www.hardcodet.net/taskbar"
    xmlns:i="http://imagin.tech/imagin/wpf">
    <i:MainWindow.Resources>
        <ContextMenu x:Key="{x:Static local:MainViewModel.TileMenuKey}" x:Shared="False" DataContext="{i:Self PlacementTarget.DataContext}">
            <MenuItem Header="{i:Loc Lock}"
                IsCheckable="True"
                IsChecked="{Binding IsLocked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                StaysOpenOnClick="True"/>
            <Separator/>
            <MenuItem Header="{i:Loc Options}"
                Command="{i:RemoteBinding RemoteSource=MainViewModel, Path=ShowTileOptionsCommand}"
                CommandParameter="{Binding}"
                Icon="{i:InternalImage Image=Options}"/>
            <MenuItem Header="{i:Loc Remove}"
                Command="{i:RemoteBinding RemoteSource=MainViewModel, Path=RemoveTileCommand}"
                CommandParameter="{Binding}"
                Icon="{i:InternalImage Image=XRound}"/>
        </ContextMenu>

        <Style x:Key="{x:Static local:MainViewModel.TileStyleKey}" TargetType="FrameworkElement">
            <Setter Property="Canvas.Left" Value="{Binding Position.X, Mode=TwoWay}"/>
            <Setter Property="Canvas.Top" Value="{Binding Position.Y, Mode=TwoWay}"/>
            <Setter Property="Height" Value="{Binding Size.Height, Mode=TwoWay}"/>
            <Setter Property="Width" Value="{Binding Size.Width, Mode=TwoWay}"/>
            <Setter Property="i:XElement.FadeIn" Value="True"/>
            <Setter Property="i:XElement.FadeOut" Value="True"/>
            <Setter Property="i:XElement.CanResize" Value="False"/>
            <Setter Property="i:XElement.ResizeSnap" Value="{i:Options TileSnap}"/>
            <Setter Property="i:XElement.ResizeThumbStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type Thumb}">
                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Thumb}">
                                    <Border
                                        Background="{i:ThemeKey ActualKey=Accent}"
                                        Cursor="{TemplateBinding Cursor}">
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSelected}" Value="True"/>
                        <Condition Binding="{Binding IsLocked}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="i:XElement.CanResize" Value="True"/>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>

        <i:TypeTemplateSelector x:Key="{x:Static local:MainViewModel.TileHeaderTemplateSelectorKey}">
            <DataTemplate DataType="{x:Type local:CalendarTile}">
                <TextBox
                    i:XTextBox.CanLabel="True"
                    i:XTextBox.EditButtonVisibility="Visible"
                    i:XTextBox.EditMouseEvent="MouseDown"
                    i:XTextBox.IsEditable="False"
                    i:XTextBox.Label="{i:Self Text}"
                    Text="{Binding Title}"
                    ToolTip="{i:Self Text}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ClockTile}">
                <TextBox
                    i:XTextBox.CanLabel="True"
                    i:XTextBox.EditButtonVisibility="Visible"
                    i:XTextBox.EditMouseEvent="MouseDown"
                    i:XTextBox.IsEditable="False"
                    i:XTextBox.Label="{Binding DateTime}"
                    Text="{Binding Format, Mode=TwoWay}"
                    ToolTip="{i:Self Text}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ColorTile}">
                <TextBox Text="{Binding Document.NewColor, Converter={x:Static i:ColorToStringConverter.Default}, Mode=TwoWay}">
                    <i:XTextBoxBase.Left>
                        <i:DataTemplateCollection>
                            <DataTemplate>
                                <TextBlock Margin="0,0,5,0" Opacity="0.5" Text="#"/>
                            </DataTemplate>
                        </i:DataTemplateCollection>
                    </i:XTextBoxBase.Left>
                </TextBox>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ConsoleTile}">
                <i:AddressBox i:XExplorer.Path="{i:TwoWay Path}"
                    Refreshed="AddressBox_Refreshed"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:CountDownTile}">
                <TextBox
                    i:XTextBox.CanLabel="True"
                    i:XTextBox.EditButtonVisibility="Visible"
                    i:XTextBox.EditMouseEvent="MouseDown"
                    i:XTextBox.IsEditable="False"
                    i:XTextBox.Label="{i:Self Text}"
                    i:XTextBoxBase.Placeholder="{i:Loc Title}"
                    Text="{Binding Title, Mode=TwoWay}"
                    ToolTip="{i:Self Text}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:FolderTile}">
                <i:AddressBox i:XExplorer.Path="{i:TwoWay Path}"
                    Refreshed="AddressBox_Refreshed"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ImageTile}">
                <i:PathBox 
                    BrowseMode="Open"
                    CanBrowse="True"
                    CanValidate="True"
                    i:XTextBox.CanLabel="True"
                    i:XTextBox.EditButtonVisibility="Visible"
                    i:XTextBox.EditMouseEvent="MouseDown"
                    i:XTextBox.IsEditable="False"
                    i:XTextBox.Label="{Binding Path, Converter={x:Static i:FileNameConverter.Default}}"
                    i:XTextBoxBase.Placeholder="{i:Loc FileOrFolderPath}"
                    IconVisibility="Visible"
                    BrowseButtonVisibility="True"
                    Text="{Binding Path, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                    ToolTip="{Binding Path}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:NoteTile}">
                <TextBox
                    i:XTextBox.CanLabel="True"
                    i:XTextBox.EditButtonVisibility="Visible"
                    i:XTextBox.EditMouseEvent="MouseDown"
                    i:XTextBox.IsEditable="False"
                    i:XTextBox.Label="{i:Self Text}"
                    i:XTextBoxBase.Placeholder="{i:Loc Title}"
                    Text="{Binding Title, Mode=TwoWay}"
                    ToolTip="{i:Self Text, Mode=OneWay}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:SearchTile}">
                <ComboBox
                    ItemsSource="{i:Options SearchEngines}"
                    SelectedIndex="{Binding SearchEngine, Mode=TwoWay}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate DataType="local:SearchEngine">
                            <TextBlock HorizontalAlignment="Left" Text="{Binding Name}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                    <i:XComboBox.SelectedItemTemplate>
                        <DataTemplate DataType="local:SearchEngine">
                            <TextBlock HorizontalAlignment="Left" Text="{Binding Name}"/>
                        </DataTemplate>
                    </i:XComboBox.SelectedItemTemplate>
                </ComboBox>
            </DataTemplate>
        </i:TypeTemplateSelector>

        <i:TypeTemplateSelector x:Key="{x:Static local:MainViewModel.TileContentTemplateSelectorKey}">
            <DataTemplate DataType="{x:Type local:CalendarTile}">
                <Viewbox>
                    <Calendar SelectedDate="{i:TwoWay Date}"/>
                </Viewbox>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ClockTile}">
                <Viewbox 
                    Grid.Row="0"
                    Stretch="Uniform" 
                    StretchDirection="Both">
                    <i:Clock Margin="5"/>
                </Viewbox>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ColorTile}">
                <i:ColorSelectorView Document="{Binding Document}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ConsoleTile}">
                <i:Console 
                    Background="Transparent"
                    BorderThickness="0"
                    i:XElement.Reference="{Binding}"
                    i:XElement.ReferenceKey="{x:Static local:ConsoleTile.ConsoleReferenceKey}"
                    i:XExplorer.Path="{Binding Path, Mode=TwoWay}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:CountDownTile}">
                <Viewbox Stretch="Uniform" StretchDirection="Both">
                    <TextBox
                        FontSize="36"
                        HorizontalAlignment="Center"
                        i:XTextBox.CanLabel="True"
                        i:XTextBox.EditMouseEvent="MouseDown"
                        i:XTextBox.IsEditable="False"
                        i:XTextBox.Label="{Binding Date, Converter={x:Static i:ShortTimeConverter.Default}, ConverterParameter=1}"
                        Text="{Binding Date, Mode=TwoWay, StringFormat='M/d/yyyy h:mm tt', UpdateSourceTrigger=LostFocus}"
                        ToolTip="{i:Self Label}"
                        VerticalAlignment="Center"/>
                </Viewbox>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:FolderTile}">
                <i:Browser 
                    Background="Transparent"
                    BorderThickness="0"
                    FileAttributes="{Binding BrowserOptions.FileAttributes}"
                    FileExtensions="{Binding BrowserOptions.FileExtensions}"
                    FileOpened="OnFileOpened"
                    FolderAttributes="{Binding BrowserOptions.FolderAttributes}"
                    FolderOpened="OnFolderOpened"
                    GroupDirection="{Binding BrowserOptions.GroupDirection}"
                    GroupName="{Binding BrowserOptions.GroupName}"
                    IsReadOnly="{Binding IsReadOnly}"
                    i:XElement.Reference="{Binding}"
                    i:XElement.ReferenceKey="{x:Static local:FolderTile.BrowserReferenceKey}"
                    i:XExplorer.Path="{Binding Path, Mode=TwoWay}"
                    SortDirection="{Binding BrowserOptions.SortDirection, Converter={x:Static i:SortDirectionConverter.Default}}"
                    SortName="{Binding BrowserOptions.SortName}"
                    View="{Binding BrowserOptions.View}"
                    ViewCheckBoxes="{Binding BrowserOptions.ViewCheckBoxes}"
                    ViewFileExtensions="{Binding BrowserOptions.ViewFileExtensions}"
                    ViewFiles="{Binding BrowserOptions.ViewFiles}"
                    ViewSize="{Binding BrowserOptions.ViewSize, Mode=TwoWay}">
                </i:Browser>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:ImageTile}">
                <i:SlideControl
                    BackgroundOpacity="1"
                    Interval="{Binding Interval}"
                    PauseOnMouseOver="True"
                    Path="{Binding Path}"
                    Transition="{Binding Transition}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:NoteTile}">
                <TextBox
                    AcceptsReturn="True"
                    FontFamily="{Binding FontFamily}"
                    FontSize="{Binding FontSize}"
                    HorizontalAlignment="Stretch"
                    i:XElement.Wheel="True"
                    i:XElement.WheelMaximum="72"
                    i:XElement.WheelMinimum="8"
                    i:XElement.WheelValue="{Binding FontSize, Mode=TwoWay}"
                    i:XTextBox.ClearButtonVisibility="Collapsed"
                    i:XTextBoxBase.TextTrimming="None"
                    Text="{Binding Text, Mode=TwoWay}"
                    TextWrapping="Wrap"
                    VerticalAlignment="Stretch"
                    VerticalContentAlignment="Top"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type local:SearchTile}">
                <TextBox
                    BorderThickness="0"
                    i:XTextBox.EnterCommand="{Binding SearchCommand}"
                    i:XTextBox.EnterButtonVisibility="Visible"
                    i:XTextBoxBase.Placeholder="Search..."
                    i:XTextBoxBase.TextTrimming="CharacterEllipsis"
                    Text="{Binding Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </DataTemplate>
        </i:TypeTemplateSelector>

        <DataTemplate x:Key="{x:Static local:MainViewModel.TileTemplateKey}">
            <Grid x:Name="Grid" DataContext="{Binding}" ContextMenu="{StaticResource {x:Static local:MainViewModel.TileMenuKey}}">
                <i:FillElement x:Name="FillElement"
                    Opacity="{i:Options TileOpacity}"/>
                <HeaderedContentControl x:Name="HeaderedContentControl" Header="{Binding}"
                    i:XHeaderedContentControl.HeaderPlacement="{i:Options TileHeaderPlacement}"
                    Padding="5">
                    <HeaderedContentControl.HeaderTemplate>
                        <DataTemplate>
                            <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="*,Auto"
                                i:XPanel.Spacing="0,0,5,0"
                                i:XPanel.SpacingExcept="Last"
                                i:XPanel.VerticalContentAlignment="Center">
                                <ContentPresenter x:Name="ContentPresenter" Content="{Binding}" ContentTemplateSelector="{StaticResource {x:Static local:MainViewModel.TileHeaderTemplateSelectorKey}}"/>
                                <i:ImageToggleButton
                                    Menu="{StaticResource {x:Static local:MainViewModel.TileMenuKey}}"
                                    Source="{i:InternalImage Image=TriangleDown}"/>
                            </Grid>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{i:IsBinding local:CalendarTile}" Value="True">
                                    <Setter TargetName="ContentPresenter" Property="HorizontalAlignment" Value="{i:Options TileHeaderAlignment}"/>
                                    <Setter TargetName="ContentPresenter" Property="VerticalAlignment" Value="Center"/>
                                </DataTrigger>
                                <DataTrigger Binding="{i:IsBinding local:ClockTile}" Value="True">
                                    <Setter TargetName="ContentPresenter" Property="HorizontalAlignment" Value="{i:Options TileHeaderAlignment}"/>
                                    <Setter TargetName="ContentPresenter" Property="VerticalAlignment" Value="Center"/>
                                </DataTrigger>
                                <DataTrigger Binding="{i:IsBinding local:ConsoleTile}" Value="True">
                                    <Setter TargetName="ContentPresenter" Property="HorizontalAlignment" Value="Stretch"/>
                                    <Setter TargetName="ContentPresenter" Property="VerticalAlignment" Value="Stretch"/>
                                </DataTrigger>
                                <DataTrigger Binding="{i:IsBinding local:CountDownTile}" Value="True">
                                    <Setter TargetName="ContentPresenter" Property="HorizontalAlignment" Value="{i:Options TileHeaderAlignment}"/>
                                    <Setter TargetName="ContentPresenter" Property="VerticalAlignment" Value="Center"/>
                                </DataTrigger>
                                <DataTrigger Binding="{i:IsBinding local:FolderTile}" Value="True">
                                    <Setter TargetName="ContentPresenter" Property="HorizontalAlignment" Value="Stretch"/>
                                    <Setter TargetName="ContentPresenter" Property="VerticalAlignment" Value="Stretch"/>
                                </DataTrigger>
                                <DataTrigger Binding="{i:IsBinding local:ImageTile}" Value="True">
                                    <Setter TargetName="ContentPresenter" Property="HorizontalAlignment" Value="{i:Options TileHeaderAlignment}"/>
                                    <Setter TargetName="ContentPresenter" Property="VerticalAlignment" Value="Center"/>
                                </DataTrigger>
                                <DataTrigger Binding="{i:IsBinding local:NoteTile}" Value="True">
                                    <Setter TargetName="ContentPresenter" Property="HorizontalAlignment" Value="{i:Options TileHeaderAlignment}"/>
                                    <Setter TargetName="ContentPresenter" Property="VerticalAlignment" Value="Center"/>
                                </DataTrigger>
                                <DataTrigger Binding="{i:IsBinding local:SearchTile}" Value="True">
                                    <Setter TargetName="ContentPresenter" Property="HorizontalAlignment" Value="Stretch"/>
                                    <Setter TargetName="ContentPresenter" Property="VerticalAlignment" Value="Stretch"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </HeaderedContentControl.HeaderTemplate>
                    <HeaderedContentControl.Style>
                        <Style TargetType="{x:Type HeaderedContentControl}" BasedOn="{StaticResource {x:Type HeaderedContentControl}}">
                            <Setter Property="BorderThickness" Value="1"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                    <Setter Property="BorderBrush" Value="{i:ThemeKey ActualKey=WindowActiveBorder}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsSelected}" Value="False">
                                    <Setter Property="BorderBrush" Value="{i:ThemeKey ActualKey=WindowBorder}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </HeaderedContentControl.Style>
                    <i:AllBorder>
                        <ContentPresenter Content="{Binding}" ContentTemplateSelector="{StaticResource {x:Static local:MainViewModel.TileContentTemplateSelectorKey}}"/>
                    </i:AllBorder>
                </HeaderedContentControl>
            </Grid>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{i:Options TileOverrideTheme}" Value="True">
                    <Setter TargetName="FillElement" 
                        Property="Fill" Value="{i:Options TileBackground, Converter={x:Static i:ByteVector4ToSolidColorBrushConverter.Default}}"/>
                    <Setter TargetName="HeaderedContentControl" 
                        Property="Foreground" Value="{i:Options TileForeground, Converter={x:Static i:ByteVector4ToSolidColorBrushConverter.Default}}"/>
                </DataTrigger> 
                <DataTrigger Binding="{i:Options TileOverrideTheme}" Value="False">
                    <Setter TargetName="FillElement" Property="Fill" Value="{i:ThemeKey ActualKey=WindowBackground}"/>
                </DataTrigger>
                <DataTrigger Binding="{i:Options TileHeaderPlacement}" Value="Top">
                    <Setter TargetName="HeaderedContentControl" Property="i:XHeaderedContentControl.HeaderPadding" Value="5,5,5,0"/>
                </DataTrigger>
                <DataTrigger Binding="{i:Options TileHeaderPlacement}" Value="Bottom">
                    <Setter TargetName="HeaderedContentControl" Property="i:XHeaderedContentControl.HeaderPadding" Value="5,0,5,5"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
    </i:MainWindow.Resources>
    <i:MainWindow.TaskbarItemInfo>
        <TaskbarItemInfo Description="{Binding TaskbarItemDescription}">
            <TaskbarItemInfo.ThumbButtonInfos>
                <ThumbButtonInfo 
                    Command="{Binding LeftScreenCommand}"
                    Description="Previous screen"
                    ImageSource="{i:InternalImage Image=ArrowLeft}"/>
                <ThumbButtonInfo 
                    Command="{Binding AddScreenCommand}"
                    Description="Add screen"
                    ImageSource="{i:InternalImage Image=Plus}"/>
                <ThumbButtonInfo 
                    Command="{Binding RightScreenCommand}"
                    Description="Next screen"
                    ImageSource="{i:InternalImage Image=ArrowRight}"/>
            </TaskbarItemInfo.ThumbButtonInfos>
        </TaskbarItemInfo>
    </i:MainWindow.TaskbarItemInfo>
    <Grid>
        <Hardcodet:TaskbarIcon
            x:Name="TaskbarIcon"
            IconSource="{i:Image Imagin.Apps.Desktop, Logo.ico}"
            MenuActivation="LeftOrRightClick"
            ToolTipText="{i:AssemblyProduct}"
            Visibility="Visible">
            <Hardcodet:TaskbarIcon.ContextMenu>
                <ContextMenu>
                    <ContextMenu.Resources>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{i:TypeBinding}" Value="{x:Type local:Screen}">
                                    <Setter Property="Command" Value="{i:RemoteBinding RemoteSource=MainViewModel, Path=SelectScreenCommand}"/>
                                    <Setter Property="CommandParameter" Value="{Binding}"/>
                                    <Setter Property="HeaderTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <Grid i:XGrid.Columns="*,Auto">
                                                    <TextBlock Text="{Binding Index, StringFormat='Screen {0}'}"/>
                                                    <i:ImageButton
                                                        Grid.Column="1"
                                                        Command="{i:RemoteBinding RemoteSource=MainViewModel, Path=DeleteScreenCommand}"
                                                        CommandParameter="{Binding}"
                                                        Margin="5,0,0,0"
                                                        Source="{i:InternalImage Image=Trash}"/>
                                                </Grid>
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="IsCheckable" Value="True"/>
                                    <Setter Property="i:XMenuItem.GroupName" Value="Screens"/>
                                    <Setter Property="i:XMenuItem.SelectionMode" Value="Single"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ContextMenu.Resources>
                    <ContextMenu.ItemsSource>
                        <CompositeCollection>
                            <MenuItem Header="Draw"
                                Command="{Binding DrawCommand}"
                                FontWeight="Bold"
                                Icon="{i:InternalImage Image=Pencil}"/>
                            <Separator i:XSeparator.Header="{i:Loc Screens}">
                                <i:XSeparator.HeaderTemplate>
                                    <DataTemplate>
                                        <StackPanel i:XPanel.VerticalContentAlignment="Center" Orientation="Horizontal">
                                            <TextBlock Margin="0,0,5,0" Text="{Binding}"/>
                                            <i:ImageButton
                                                Command="{i:RemoteBinding AddScreenCommand, RemoteSource=MainViewModel}"
                                                Source="{i:InternalImage Image=Plus}"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </i:XSeparator.HeaderTemplate>
                            </Separator>
                            <CollectionContainer Collection="{i:RemoteBinding RemoteSource=MainViewModel, Path=Screens}"/>
                            <Separator/>
                            <MenuItem Header="About"
                                Command="{i:RemoteBinding RemoteSource=MainViewModel, Path=ShowAboutWindowCommand}"
                                Icon="{i:InternalImage Image=Info}"/>
                            <MenuItem Header="Options"
                                Command="{i:RemoteBinding RemoteSource=MainViewModel, Path=ShowOptionsWindowCommand}"
                                Icon="{i:InternalImage Image=Options}"/>
                            <Separator/>
                            <MenuItem Header="Log"
                                Command="{i:RemoteBinding RemoteSource=MainViewModel, Path=ShowLogWindowCommand}"
                                Icon="{i:InternalImage Image=Log}"/>
                            <Separator/>
                            <MenuItem Header="Exit"
                                Command="{i:RemoteBinding RemoteSource=MainViewModel, Path=ForceExitCommand}"
                                Icon="{i:InternalImage Image=XRound}"/>
                        </CompositeCollection>
                    </ContextMenu.ItemsSource>
                </ContextMenu>
            </Hardcodet:TaskbarIcon.ContextMenu>
        </Hardcodet:TaskbarIcon>
        <i:TransitionControl
            Background="{x:Null}"
            Content="{i:RemoteBinding RemoteSource=MainViewModel, Path=Screen, Mode=TwoWay}"
            Transition="{i:Options ScreenTransition}">
            <i:TransitionControl.ContentTemplate>
                <DataTemplate DataType="{x:Type local:Screen}">
                    <ItemsControl ItemsSource="{Binding}"
                        ItemContainerStyle="{StaticResource {x:Static local:MainViewModel.TileStyleKey}}"
                        ItemTemplate="{StaticResource {x:Static local:MainViewModel.TileTemplateKey}}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Canvas i:XCanvas.CanDrag="True" i:XCanvas.CanSelect="True" i:XCanvas.DragSnap="{i:Options TileSnap}"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                </DataTemplate>
            </i:TransitionControl.ContentTemplate>
        </i:TransitionControl>
        <i:FillElement Fill="#CC000000"
            i:XElement.CanSelect="True"
            i:XElement.Selected="OnSelected"
            i:XElement.FadeTrigger="True"
            i:XElement.FadeTriggerSource="{i:RemoteBinding RemoteSource=MainViewModel, Path=Drawing}"
            Opacity="0">
            <Button
                Command="{Binding CancelCommand}"
                HorizontalAlignment="Center"
                IsCancel="True"
                Margin="0,0,0,10"
                VerticalAlignment="Bottom">
                <StackPanel Orientation="Horizontal">
                    <i:ImageElement
                        Margin="0,0,10,0"
                        Source="{i:InternalImage Image=Pencil}"
                        SourceSize="16,16"/>
                    <TextBlock Text="Cancel"/>
                </StackPanel>
            </Button>
        </i:FillElement>
    </Grid>
</i:MainWindow>